{"version":3,"sources":["serviceWorker.js","GeoPosition.jsx","Container.jsx","index.js"],"names":["Boolean","window","location","hostname","match","GeoPosition","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","name","event","setState","defineProperty","parseFloat","target","value","state","objectSpread","formData","inherits","createClass","key","_this$props$formData","lat","lon","react_default","a","createElement","type","React","Component","schema","required","properties","thing","title","items","fields","geo","uiSchema","ui:field","Container","_this2","Fragment","lib_default","data","ReactDOM","render","Container_Container","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.87d418e5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\n\r\nexport class GeoPosition extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            ...props.formData\r\n        };\r\n    }\r\n\r\n    onChange = name => {\r\n        return event => {\r\n            this.setState(\r\n                {\r\n                    [name]: parseFloat(event.target.value)\r\n                },\r\n                () => this.props.onChange(this.state)\r\n            );\r\n        };\r\n    };\r\n\r\n    render() {\r\n        // const { lat, lon } = this.state;\r\n        const { lat, lon } = this.props.formData;\r\n        return (\r\n            <div>\r\n                <div>This is a simple custom field</div>\r\n                <input\r\n                    type=\"number\"\r\n                    value={lat}\r\n                    onChange={this.onChange(\"lat\")}\r\n                />\r\n                <input\r\n                    type=\"number\"\r\n                    value={lon}\r\n                    onChange={this.onChange(\"lon\")}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { GeoPosition } from \"./GeoPosition\";\r\nimport Form from \"react-jsonschema-form\";\r\n\r\nconst schema = {\r\n    type: \"object\",\r\n    required: [],\r\n    properties: {\r\n        thing: {\r\n            type: \"array\",\r\n            title: \"Coordinate List - Try Reordering\",\r\n            items: {\r\n                type: \"object\",\r\n                required: [],\r\n                properties: {\r\n                    lat: {\r\n                        type: \"number\"\r\n                    },\r\n                    lon: {\r\n                        type: \"number\"\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n// Define the custom field components to register; here our \"geo\" custom field component\r\nconst fields = { geo: GeoPosition };\r\n\r\n// Define the custom field component to use for the root object\r\nconst uiSchema = {\r\n    thing: {\r\n        items: {\r\n            \"ui:field\": \"geo\"\r\n        }\r\n    }\r\n};\r\n\r\nexport class Container extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            formData: { thing: [{ lat: 10, lon: 10 }, { lat: 50, lon: 60 }] }\r\n        };\r\n    }\r\n\r\n    onChange = formData => {\r\n        this.setState({ formData });\r\n    };\r\n\r\n    render() {\r\n        const { formData } = this.state;\r\n\r\n        return (\r\n            <>\r\n                <div>\r\n                    <h2>This form uses custom fields</h2>\r\n                </div>\r\n                <Form\r\n                    schema={schema}\r\n                    uiSchema={uiSchema}\r\n                    fields={fields}\r\n                    formData={formData}\r\n                    onChange={data => this.onChange(data.formData)}\r\n                />\r\n                <hr />\r\n                <div>\r\n                    <h2>\r\n                        This form does not use custom fields but represents the\r\n                        same data as above\r\n                    </h2>\r\n                </div>\r\n                <Form\r\n                    schema={schema}\r\n                    fields={fields}\r\n                    formData={formData}\r\n                    onChange={data => this.onChange(data.formData)}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { Container } from \"./Container\";\n\nReactDOM.render(<Container />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}