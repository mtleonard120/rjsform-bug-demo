{"version":3,"sources":["serviceWorker.js","GeoPositionUseLocalState.jsx","GeoPositionUseProps.jsx","Container.jsx","index.js"],"names":["Boolean","window","location","hostname","match","GeoPositionUseLocalState","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","name","event","setState","defineProperty","parseFloat","target","value","state","objectSpread","formData","inherits","createClass","key","_this$state","lat","lon","react_default","a","createElement","className","type","React","Component","GeoPositionUseProps","_this$props$formData","schema","required","properties","thing","title","items","fields","geoLS","geoP","uiSchemaLS","ui:field","uiSchemaP","Container","_this2","Fragment","lib_default","data","uiSchema","ReactDOM","render","Container_Container","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.80af6cd8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport \"./App.css\";\r\n\r\nexport class GeoPositionUseLocalState extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            ...props.formData\r\n        };\r\n    }\r\n\r\n    onChange = name => {\r\n        return event => {\r\n            this.setState(\r\n                {\r\n                    [name]: parseFloat(event.target.value)\r\n                },\r\n                () => this.props.onChange(this.state)\r\n            );\r\n        };\r\n    };\r\n\r\n    render() {\r\n        const { lat, lon } = this.state;\r\n        return (\r\n            <div>\r\n                <div>This is a simple custom field</div>\r\n                <div>\r\n                    <span className=\"input\">\r\n                        {`lat: `}\r\n                        <input\r\n                            type=\"number\"\r\n                            value={lat}\r\n                            onChange={this.onChange(\"lat\")}\r\n                        />\r\n                    </span>\r\n                    <span className=\"input\">\r\n                        {`lon: `}\r\n                        <input\r\n                            type=\"number\"\r\n                            value={lon}\r\n                            onChange={this.onChange(\"lon\")}\r\n                        />\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\n\r\nexport class GeoPositionUseProps extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            ...props.formData\r\n        };\r\n    }\r\n\r\n    onChange = name => {\r\n        return event => {\r\n            this.setState(\r\n                {\r\n                    [name]: parseFloat(event.target.value)\r\n                },\r\n                () => this.props.onChange(this.state)\r\n            );\r\n        };\r\n    };\r\n\r\n    render() {\r\n        const { lat, lon } = this.props.formData;\r\n        return (\r\n            <div>\r\n                <div>This is a simple custom field</div>\r\n                <div>\r\n                    <span className=\"input\">\r\n                        {`lat: `}\r\n                        <input\r\n                            type=\"number\"\r\n                            value={lat}\r\n                            onChange={this.onChange(\"lat\")}\r\n                        />\r\n                    </span>\r\n                    <span className=\"input\">\r\n                        {`lon: `}\r\n                        <input\r\n                            type=\"number\"\r\n                            value={lon}\r\n                            onChange={this.onChange(\"lon\")}\r\n                        />\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { GeoPositionUseLocalState } from \"./GeoPositionUseLocalState\";\r\nimport { GeoPositionUseProps } from \"./GeoPositionUseProps\";\r\nimport Form from \"react-jsonschema-form\";\r\n\r\nconst schema = {\r\n    type: \"object\",\r\n    required: [],\r\n    properties: {\r\n        thing: {\r\n            type: \"array\",\r\n            title: \"Coordinate List - Try Reordering\",\r\n            items: {\r\n                type: \"object\",\r\n                required: [],\r\n                properties: {\r\n                    lat: {\r\n                        type: \"number\"\r\n                    },\r\n                    lon: {\r\n                        type: \"number\"\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nconst fields = {\r\n    geoLS: GeoPositionUseLocalState,\r\n    geoP: GeoPositionUseProps\r\n};\r\n\r\nconst uiSchemaLS = {\r\n    thing: {\r\n        items: {\r\n            \"ui:field\": \"geoLS\"\r\n        }\r\n    }\r\n};\r\n\r\nconst uiSchemaP = {\r\n    thing: {\r\n        items: {\r\n            \"ui:field\": \"geoP\"\r\n        }\r\n    }\r\n};\r\n\r\nexport class Container extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            formData: { thing: [{ lat: 10, lon: 10 }, { lat: 50, lon: 60 }] }\r\n        };\r\n    }\r\n\r\n    onChange = formData => {\r\n        this.setState({ formData });\r\n    };\r\n\r\n    render() {\r\n        const { formData } = this.state;\r\n\r\n        return (\r\n            <>\r\n                <h1>RJS Form Custom Field Reordering Bug Demo</h1>\r\n                <hr />\r\n                <p>\r\n                    My hunch is that RJS Form has a \"derived state from props\"\r\n                    issue.\r\n                </p>\r\n                <p>\r\n                    If you instruct a custom field to use its own local state\r\n                    copy of form data as the source of truth (while also passing\r\n                    local change events up to the RJS form) then the fields will\r\n                    not understand or register array reorderings (since the\r\n                    reordering event is not captured in a field's local state -\r\n                    that order state is maintained in the parent of the custom\r\n                    field).\r\n                </p>\r\n                <p>\r\n                    On the other hand, if you instruct custom fields to treat\r\n                    the form data props it receives from its parent as the\r\n                    source of truth, reorderings do register correctly... at\r\n                    face value. The issue is that after a reordering if you\r\n                    change a single property within the custom field, RJS will\r\n                    have fundamentally lost track of which custom field is which\r\n                    and will spit out erroneous formData on its onChange event\r\n                    handler (essentially believing that the unchanged property\r\n                    in the reordered custom field has the value of that prop in\r\n                    the \"pre-reordering\" custom field).\r\n                </p>\r\n                <p>\r\n                    What follows is a demonstration of the two approaches\r\n                    described above. Three forms are displayed: a vanilla RJS\r\n                    form with no custom fields, a custom field RJS form in which\r\n                    the custom field uses its own local state as the source of\r\n                    truth and lastly a custom field RJS form in which the custom\r\n                    field uses the form data props it receives as the source of\r\n                    truth.\r\n                </p>\r\n                <p>\r\n                    All three forms are contained in a Container component which\r\n                    is maintaining control over the props fed into the Form\r\n                    components. The same form data is simultaneously fed into\r\n                    each of the three forms so that comparisons in behavior are\r\n                    easy to compare.\r\n                </p>\r\n                <div>\r\n                    <h2>\r\n                        This is the basic form which does not use custom fields\r\n                        - reordering and editing work fine\r\n                    </h2>\r\n                </div>\r\n                <Form\r\n                    schema={schema}\r\n                    fields={fields}\r\n                    formData={formData}\r\n                    onChange={data => this.onChange(data.formData)}\r\n                />\r\n                <hr />\r\n                <div>\r\n                    <h2>\r\n                        This form uses custom fields and treats custom field\r\n                        local state as source of truth - reordering does not\r\n                        work but editing does\r\n                    </h2>\r\n                </div>\r\n                <Form\r\n                    schema={schema}\r\n                    uiSchema={uiSchemaLS}\r\n                    fields={fields}\r\n                    formData={formData}\r\n                    onChange={data => this.onChange(data.formData)}\r\n                />\r\n                <hr />\r\n                <div>\r\n                    <h2>\r\n                        This form uses custom fields and treats parent props as\r\n                        source of truth - reordering works but editing a\r\n                        property after reordering into a different order than\r\n                        the initial state leads to unexpected changes in the\r\n                        prop not being edited by the user.\r\n                    </h2>\r\n                </div>\r\n                <Form\r\n                    schema={schema}\r\n                    uiSchema={uiSchemaP}\r\n                    fields={fields}\r\n                    formData={formData}\r\n                    onChange={data => this.onChange(data.formData)}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { Container } from \"./Container\";\n\nReactDOM.render(<Container />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}